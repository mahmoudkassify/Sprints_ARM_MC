/*****************************************************************************/
/** Copyright (c) 2020 Mahmoud Kassify. All Rights Reserved.				**/
/*****************************************************************************/

/**********************************************************************************************************************

 *  FILE DESCRIPTION
 *  -------------------------------------------------------------------------------------------------------------------
 *         File:  <Bit_Operation.h>
 *       Module:  -
 *
 *  Description:  <This file has common macros needed in the system>     
 *  
 *********************************************************************************************************************/
#ifndef _H_BIT_OPERATION_
#define _H_BIT_OPERATION_

/**********************************************************************************************************************
 * INCLUDES
 *********************************************************************************************************************/
#include "Platform_Types.h" 
#include "Platform_Defines.h"
/**********************************************************************************************************************
 *  GLOBAL CONSTANT MACROS
 *********************************************************************************************************************/


/**********************************************************************************************************************
 *  GLOBAL FUNCTION MACROS
 *****---------------------*/

#define GET_ADDR(base_add, offset)                          ((uint32)((base_add) + (offset)))

#define WRTIE_ADD(address)                                  (*((uint32 *)(address)))

#define SET_BIT(var, bit_num)                               (var) |= (1UL << (bit_num))

#define CLR_BIT(var, bit_num)                               (var) &= (~(1UL << (bit_num)))

#define TOG_BIT(var, bit_num)                               (var) ^= (1UL << (bit_num))

#define GET_BIT_STATUS(var, bit_num)                        (0UL != ((var) & (1UL << (bit_num))))

#define ARRAY_SIZE(arr)                                     (sizeof(arr)/sizeof(arr[0]))

#define WRITE_BITBAND(alias_base, base_add, add, bit_num)   (*((volatile uint32 *)(alias_base +( 32 * (add - base_add) ) + bit_num * 4)))  

#define PERIPHERAL_BITBAND(add, bit_num)                    WRITE_BITBAND(PERIPHERAL_BITBAND_ALIAS, PERIPHERAL_BITBAND_REGION, add, bit_num)  

#define RAM_BITBAND(add, bit_num)                           WRITE_BITBAND(RAM_BITBAND_ALIAS, RAM_BITBAND_REGION, add, bit_num)  


/**********************************************************************************************************************
 *  GLOBAL DATA TYPES AND STRUCTURES
 *********************************************************************************************************************/


/**********************************************************************************************************************
 *  GLOBAL DATA PROTOTYPES
 *********************************************************************************************************************/

 
/**********************************************************************************************************************
 *  GLOBAL FUNCTION PROTOTYPES
 *********************************************************************************************************************/

#endif /*_H_BIT_OPERATION_*/


/**********************************************************************************************************************
 *  END OF FILE: Bit_Operation.h
 *********************************************************************************************************************/


